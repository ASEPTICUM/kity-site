class MiTabs {
    constructor(menu, body, settings = {}) {
        this.menu = document.querySelector(menu);
        this.body = document.querySelector(body);
        this.settings = {
            contentCallback: settings.contentCallback ? settings.contentCallback : () => { return 'The tab does not exist'},
            changeTabCallback: settings.changeTabCallback ? settings.changeTabCallback : false,
        }
        this.menu.addEventListener('click', this.#changeTab.bind(this));
    }

    async #changeTab(event) {

        let target = event.target.closest('.MiTab-narrow');

        if(!target || target.dataset.loading) return false;

        const tabPageId = target.getAttribute('data-tab');
        
        if(!this.body.querySelector(`[data-tabBody="${tabPageId}"]`)) {
            target.dataset.loading = true;
            await this.#createTab(tabPageId);
            target.removeAttribute('data-loading');
        }
        
        let block = this.body.querySelector(`[data-tabBody="${tabPageId}"]`);
        if(block.classList.contains('active')) return false;

        
        let activeNarrow = this.menu.querySelector(`.MiTab-narrow.active-tabLink`)

        if(activeNarrow) activeNarrow.classList.remove('active-tabLink');

        let activeBody = this.body.querySelector(`.MiTab-item.active`);

        if(activeBody) activeBody.classList.remove('active');


        block.classList.add('active');
        target.classList.add('active-tabLink');

        if(this.settings.changeTabCallback) this.settings.changeTabCallback({tabPageId: tabPageId, block: block, prevBlock: activeBody});

    }

    async #createTab(tabPageId) {
        let newTabPage = document.createElement('div');

        newTabPage.classList.add('MiTab-item');
        newTabPage.classList.add('MiTab-item');
        newTabPage.dataset.tabbody = tabPageId;

        let content = await this.settings.contentCallback(tabPageId);

        if(Array.isArray(content)) {
            content.forEach( item => {

                newTabPage.append(item);

            })
        } else {
            newTabPage.append(content);
        }

        this.body.append(newTabPage);

        return true;
    }

}

// parts of pages

const html = document.documentElement;
const body = document.body;

const header = document.querySelector('header');
const burger = header.querySelector('.header__burger');
const menu = header.querySelector('.header__menu');
const header_buttons = header.querySelector('.header__buttons');

const languages_list = header.querySelector('.languages');

const trade_fields = document.querySelectorAll('.trade__field');
const input_containers = document.querySelectorAll('.input-container');

const timers = document.querySelectorAll('.timer');

const spoilers = document.querySelectorAll('.spoiler');

const copy_buttons = document.querySelectorAll('[data-copy-value]');

const tabs = document.querySelectorAll('[data-tab-container]');



//Languages


if(languages_list) {

    const languages_active = languages_list.querySelector('.languages__active');

    languages_list.addEventListener('click', (event) => {

        event.stopPropagation();

        burger.classList.remove('active');
        menu.classList.remove('active');
        html.classList.remove('header-blocked');


        if(event.target.closest('.languages__list')) return false;

        languages_list.classList.toggle('active');

        body.addEventListener('click', () => {

            languages_list.classList.remove('active');

        }, {once:true});

    })

}


// Burger


burger.addEventListener('click', (event) => {

    event.stopPropagation();

    languages_list.classList.remove('active');

    burger.classList.toggle('active');
    menu.classList.toggle('active');
    html.classList.toggle('header-blocked');

    if(burger.classList.contains('active')) {

        html.scrollIntoView({
            'block': 'start',
            'behavior': 'smooth'
        })

    }

    body.addEventListener('click', (event) => {

        menu.classList.remove('active');
        burger.classList.remove('active');
        html.classList.remove('header-blocked');


    }, {once:true})

});

menu.addEventListener('click', (event) => {

    languages_list.classList.remove('active');

    event.stopPropagation();
    return false;

});


// Replace buttons ( header )


if(header_buttons) {

    window.addEventListener('resize', replaceHeaderButtons);

    replaceHeaderButtons();

}

// Trade Fields


if(trade_fields.length) {

    trade_fields.forEach( field => {

        const button = field.querySelector('.trade__fieldButton');
        const menu = field.querySelector('.listCurrency');
        const trade_info = field.querySelector('.trade-info');
        const trade_info_margin = ((menu.offsetHeight - 15) / 16).toFixed(3) + 'em';

        menu.addEventListener('click', (event) => {

            const currency = event.target.closest('.listCurrency__item');

            if(!currency) return false;

            const active_currency = menu.querySelector('.active');
            const name_currency = currency.querySelector('.trade__nameCurrency');
            const icon_currency = currency.querySelector('.trade__iconCurrency')

            if(active_currency) active_currency.classList.remove('active');
            
            currency.classList.add('active');
            
            button.querySelector('.trade__iconCurrency').replaceWith(icon_currency.cloneNode(true));
            button.querySelector('.trade__nameCurrency').replaceWith(name_currency.cloneNode(true));

            field.classList.remove('active-list');

        })

        button.addEventListener('click', (event) => {

            event.stopPropagation();

            field.classList.add('active-list');
            //trade_info.style.marginTop = trade_info_margin;

            languages_list.classList.remove('active');

            body.addEventListener('click', () => {

                //trade_info.style.marginTop = null;
                field.classList.remove('active-list');
                

            }, {once:true});

        });

    });

}


// Custom placeholders


if(input_containers.length) {


    
    input_containers.forEach( container => {

        const input = container.querySelector('input') || container.querySelector('textarea');
        const placeholder = container.querySelector('.input-placeholder');
        const fontSize = parseFloat(getComputedStyle(placeholder).fontSize);

        if(!placeholder) return false;
        
        let width_placeholder = (placeholder.offsetWidth + 8) / fontSize  + 'em';

        document.fonts.addEventListener('load', () => {

            width_placeholder = (placeholder.offsetWidth + 8) / fontSize  + 'em';

        })

        input.style.textIndent = width_placeholder;

        input.addEventListener('focus', () => {

        placeholder.classList.add('active');
        input.style.textIndent = 0;

        })


        input.addEventListener('blur', () => {

            placeholder.classList.remove('active');
            input.style.textIndent = width_placeholder;

        })

    })
    
    

}

// Timers


if(timers.length) {

    timers.forEach( timer => {

        let date = {
            date: {
                days: null,
                months: null,
                years: null,
            },
            time: {
                seconds: '',
                minutes: '',
                hours: '',
            }
        };

        if(timer.innerHTML.match(/^(\d+\:){0,2}(\d+)\s\d+\:\d+\:\d+$/)) {

            let array_date = timer.innerHTML.split(' ');
            
            [ date.date.days = null, date.date.months = null, date.date.years = null ] = array_date[0].split(':').reverse();

            [ date.time.seconds = 0, date.time.minutes = 0, date.time.hours = 0 ] = array_date[1].split(':').reverse();
            

        } else {

            [ date.time.seconds = 0, date.time.minutes = 0, date.time.hours = 0 ] = timer.innerHTML.split(':').reverse();
        
        }

        let interval = setInterval(() => {

            if(!timer.innerHTML.match(/[1,2,3,4,5,6,7,8,9]/)) return clearInterval(interval);

            timer.innerHTML = getHTMLTimer();

        }, 1000);


        function getHTMLTimer() {

            date.time.seconds = date.time.seconds - 1;

            if(date.time.seconds < 0) {

                date.time.minutes = date.time.minutes - 1;
                if(date.time.minutes >= 0) date.time.seconds = '59';

            }

            if(date.time.minutes < 0 ) {

                date.time.hours = date.time.hours - 1;
                if(date.time.hours >= 0) date.time.minutes = '59';


            }

            if(date.date.days === null) {

                if(+date.time.hours > 0) {
                        return (date.time.hours < 10  ? '0' + +date.time.hours : +date.time.hours) + ':' + 
                        (date.time.minutes < 10  ? '0' + +date.time.minutes : +date.time.minutes) + ':' + 
                        (date.time.seconds < 10 ? '0' + +date.time.seconds : +date.time.seconds);
                    }

                return (date.time.minutes < 10  ? '0' + +date.time.minutes : +date.time.minutes) + ':' + 
                        (date.time.seconds < 10 ? '0' + +date.time.seconds : +date.time.seconds);

            }
            
            if(date.time.hours < 0 && date.time.minutes < 0 && date.time.seconds < 0) {
               
                date.date.days = date.date.days - 1;
                if(date.date.days >= 0) date.time.hours = '24';

            }

            if(date.date.months === null) {
             
                if(+date.date.days > 0) {
                    return (date.date.days < 10  ? '0' + +date.date.days : +date.date.days) + ':' +
                    (date.time.hours < 10  ? '0' + +date.time.hours : +date.time.hours) + ':' + 
                    (date.time.minutes < 10  ? '0' + +date.time.minutes : +date.time.minutes) + ':' + 
                    (date.time.seconds < 10 ? '0' + +date.time.seconds : +date.time.seconds);
                }
                
                
                return (date.time.hours < 10  ? '0' + +date.time.hours : +date.time.hours) + ':' + 
                (date.time.minutes < 10  ? '0' + +date.time.minutes : +date.time.minutes) + ':' + 
                (date.time.seconds < 10 ? '0' + +date.time.seconds : +date.time.seconds);
                

            }


        }


    })

}


// Copy buttons


if(copy_buttons.length) {

    copy_buttons.forEach( button => {
       
        button.addEventListener('click', () => {

            const value = button.dataset.copyValue;


            button.classList.add('active');

            button.querySelector('span').innerHTML = button.dataset.textAfterCopy;

            navigator.clipboard.writeText(value);
            

        })
        
    })

}


// Tabs


if(tabs.length) {

    tabs.forEach( tab => {

        const tab_id = tab.dataset.tabContainer;

        new MiTabs(`[data-tab-menu="${tab_id}"]`, `[data-tab-container="${tab_id}"]`);

    })

}


//spoilers


if(spoilers.length) {

    spoilers.forEach( spoiler => {

        const spoiler_touch = spoiler.querySelector('.spoiler__touch');

        if(spoiler.classList.contains('active')) toggleSpoiler(spoiler, true);

        spoiler_touch.addEventListener('click', () => {

            toggleSpoiler(spoiler);

        });


    })

}


(function setRightVh() {
    let vh = window.innerHeight * 0.01;

    html.style.setProperty('--vh', `${vh}px`);

    window.addEventListener('resize', () => {

    let vh = window.innerHeight * 0.01;
    
    html.style.setProperty('--vh', `${vh}px`);
    });
})();


(function makeResponsiveHeightOfTextarea() {

    const tx = document.querySelectorAll('.textarea');

    if(!tx.length) return false;


    for (let i = 0; i < tx.length; i++) {

        tx[i].setAttribute('style', 'height:' + (tx[i].scrollHeight) + 'px;overflow-y:hidden;');
        
        tx[i].addEventListener("input", OnInput, false);
        
        tx[i].addEventListener('blur', onBlur, false);
    }


    function OnInput() {

        this.style.height = 'auto';
        
        this.style.height = (this.scrollHeight) + 'px';

    }

    function onBlur() {
        const placeholder = this.closest('.input-container') && this.closest('.input-container').querySelector('.input-placeholder');

        let buffer = null;

        if(placeholder) {

             buffer = this.value;

            this.value = placeholder.innerHTML + this.value;

        }

        this.style.height = 'auto';
        
        this.style.height = (this.scrollHeight) + 'px';
        
        if(buffer !== null) this.value = buffer;
    }

})();


function toggleSpoiler(spoiler, init = false) {

    const container = spoiler.closest('.spoilers');
    const spoiler_container = spoiler.querySelector('.spoiler__container');
    const fontSize = parseInt(getComputedStyle(spoiler).fontSize);

    if(init) return show();

    spoiler.classList.toggle('active');

    if(spoiler.classList.contains('active')) return show();

    spoiler_container.style.height = 0;



    function show() {

        spoiler_container.style.height = 'auto';
        const height = spoiler_container.offsetHeight / fontSize + 'em';

        spoiler_container.style.height = 0;

        if(container) {

            const active_spoiler = [...container.querySelectorAll('.spoiler.active')].find( item => item !== spoiler);

            if(active_spoiler) {

                active_spoiler.classList.remove('active');

                active_spoiler.querySelector('.spoiler__container').style.height = 0;

            }           

        }

        setTimeout( () => {

            spoiler_container.style.height = height;

        }, 10)

    }

}


function replaceHeaderButtons() {

    if(html.offsetWidth < 1001) {

        if(!menu.querySelector('.header__buttons')) menu.append(header_buttons);

        return;

    }


    if(!menu.querySelector('.header__buttons')) return;

    header.querySelector('.header').append(header_buttons);

}


